{"version":3,"sources":["logo.svg","CustomCursor.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CursorRoot","styled","div","CursorPointer","CursorInner","CursorArrowContainer","CursorArrow","img","CursorArrowLeft","CursorArrowRight","SCREEN_SECTIONS","CustomCursor","useState","isVisible","setIsVisible","cursorScreenLocation","setCursorScreenLocation","prevCursorScreenLocationRef","useRef","cursorPointerRef","cursorPointerInnerRef","cursorArrowLeftRef","cursorArrowRightRef","animateArrow","cursorArrowRef","fromX","toX","toOpacity","TweenMax","fromTo","current","x","to","opacity","handleMouseMove","event","target","localName","killTweensOf","set","force3D","clientX","y","clientY","width","window","innerWidth","isLeftSide","isRightSide","determineCursorScreenLocation","handleMouseDown","scale","handleMouseUp","handleMouseEnter","handleMouseLeave","useEffect","isMobile","document","addEventListener","style","body","cursor","removeEventListener","ref","src","alt","App","className","logo","href","rel","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ad20041b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useEffect, useRef} from 'react';\n\nimport {TweenMax} from 'gsap';\nimport styled from 'styled-components';\nimport {isMobile} from 'react-device-detect';\n\nconst CursorRoot = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  pointer-events: none;\n`;\n\nconst CursorPointer = styled.div`\n  position: absolute;\n  transform: translate(-50%, -50%);\n  opacity: 0;\n  pointer-events: none;\n  width: 50px;\n  height: 50px;\n  top: -25px;\n  left: -25px;\n`;\n\nconst CursorInner = styled.div`\n  box-sizing: border-box;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  z-index: 999;\n  border: 1px solid #fff;\n  border-radius: 50%;\n  transform: translate(-50%, -50%);\n  width: 49px;\n  height: 49px;\n`;\n\nconst CursorArrowContainer = styled.div`\n  position: absolute;\n  height: 20px;\n  width: 54px;\n  transform: translateY(-50%);\n  top: 50%;\n`;\n\nconst CursorArrow = styled.img`\n  opacity: 0;\n  position: absolute;\n  width:100%;\n  z-index: 999;\n`;\n\nconst CursorArrowLeft = styled(CursorArrow)`\n  left: 20px;\n`;\n\nconst CursorArrowRight = styled(CursorArrow)`\n  right: 20px;\n`;\n\nconst SCREEN_SECTIONS = {\n  CENTER: 'center',\n  LEFT: 'left',\n  RIGHT: 'right',\n}\nconst SCREEN_SECTIONS_START_VALUE = 0.25;\nconst ARROW_TRANSFORM_DURATION = 0.5;\nconst ARROW_OPACITY_DURATION = 0.166;\n\nfunction CustomCursor() {\n  const [isVisible, setIsVisible] = useState(false);\n  const [cursorScreenLocation, setCursorScreenLocation] = useState(SCREEN_SECTIONS.CENTER);\n  const prevCursorScreenLocationRef = useRef();\n  const cursorPointerRef = useRef(null);\n  const cursorPointerInnerRef = useRef(null);\n  const cursorArrowLeftRef = useRef(null);\n  const cursorArrowRightRef = useRef(null);\n\n  const animateArrow = (cursorArrowRef, fromX, toX, toOpacity) => {\n    TweenMax.fromTo(cursorArrowRef.current, ARROW_TRANSFORM_DURATION, {x:fromX}, {x:toX});\n    TweenMax.to(cursorArrowRef.current, ARROW_OPACITY_DURATION, {opacity:toOpacity});\n  };\n\n  const determineCursorScreenLocation = (clientX) => {\n    const width = window.innerWidth;\n    const isLeftSide = clientX < (width * SCREEN_SECTIONS_START_VALUE);\n    const isRightSide = clientX > (width - (width * SCREEN_SECTIONS_START_VALUE));\n    if(isLeftSide && cursorScreenLocation !== SCREEN_SECTIONS.LEFT) {\n      setCursorScreenLocation(SCREEN_SECTIONS.LEFT);\n      animateArrow(cursorArrowLeftRef, 20, 0, 1);\n    } else if (isRightSide && cursorScreenLocation !== SCREEN_SECTIONS.RIGHT) {\n      setCursorScreenLocation(SCREEN_SECTIONS.RIGHT);\n      animateArrow(cursorArrowRightRef, -20, 0, 1);\n    } else if (!isLeftSide && !isRightSide && cursorScreenLocation !== SCREEN_SECTIONS.CENTER) {\n      if (prevCursorScreenLocationRef.current === SCREEN_SECTIONS.LEFT) {\n        animateArrow(cursorArrowLeftRef, 0, 20, 0);\n      } else {\n        animateArrow(cursorArrowRightRef, 0, -20, 0);\n      }\n      setCursorScreenLocation(SCREEN_SECTIONS.CENTER);\n    }\n  };\n\n  const handleMouseMove = (event) => {\n    if (event.target && event.target.localName === 'iframe') {\n      setIsVisible(false);\n    } else {\n      setIsVisible(true);\n    }\n    TweenMax.killTweensOf(cursorPointerRef);\n    TweenMax.set(cursorPointerRef.current, { force3D: true, x: event.clientX, y: event.clientY });\n    determineCursorScreenLocation(event.clientX);\n  };\n\n  const handleMouseDown = () => {\n    TweenMax.to(cursorPointerInnerRef.current, 0.166, {scale:0.75});\n  };\n\n  const handleMouseUp = () => {\n    TweenMax.to(cursorPointerInnerRef.current, 0.166, {scale:1});\n  };\n\n  const handleMouseEnter = () => {\n    setIsVisible(true);\n  };\n\n  const handleMouseLeave = () => {\n    setIsVisible(false);\n  };\n\n  useEffect(() => {\n    if (!isMobile) {\n      prevCursorScreenLocationRef.current = cursorScreenLocation;\n      document.addEventListener('mousemove', handleMouseMove, false);\n      document.addEventListener('mouseenter', handleMouseEnter, false);\n      document.addEventListener('mouseleave', handleMouseLeave, false);\n      document.addEventListener('mousedown', handleMouseDown, false);\n      document.addEventListener('mouseup', handleMouseUp, false);\n\n      if (isVisible) {\n        cursorPointerRef.current.style.opacity = 1;\n        document.body.style.cursor = 'none';\n      } else {\n        cursorPointerRef.current.style.opacity = 0;\n        document.body.style.cursor = 'default';\n      }\n    }\n\n    return function cleanup() {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseenter', handleMouseEnter);\n      document.removeEventListener('mouseleave', handleMouseLeave);\n      document.removeEventListener('mousedown', handleMouseDown);\n      document.removeEventListener('mouseup', handleMouseDown);\n    };\n  });\n  \n  return (\n    <CursorRoot>\n      <CursorPointer ref={cursorPointerRef}>\n        <CursorInner ref={cursorPointerInnerRef} />\n        <CursorArrowContainer>\n          <CursorArrowLeft ref={cursorArrowLeftRef} src={'../arrow-left.png'} alt=\"left arrow\" />\n          <CursorArrowRight ref={cursorArrowRightRef} src={'../arrow-right.png'} alt=\"right arrow\" />\n        </CursorArrowContainer>\n      </CursorPointer>\n    </CursorRoot>\n  );\n}\n\nexport default CustomCursor;\n","import React from 'react';\nimport CustomCursor from './CustomCursor';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <CustomCursor />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}